name: "main"
on:
  push:
    branches:
      - "main"
env:
  REGISTRY_HOSTNAME: "${{ secrets.REGISTRY_HOSTNAME }}"
  REGISTRY_USERNAME: "${{ secrets.REGISTRY_USERNAME }}"
  REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"
jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.10"
      - name: "Lint codebase"
        uses: "pre-commit/action@v2.0.3"
  unit-tests:
    runs-on: "ubuntu-latest"
    needs: ["lint"]
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.10"
      - name: "Setup poetry"
        uses: "snok/install-poetry@v1"
      - name: "Restore cache"
        uses: "actions/cache@v2"
        with:
          path: "~/.cache/pypoetry/virtualenvs/"
          key: "poetry-${{ hashFiles('**/poetry.lock') }}"
      - name: "Install dependencies"
        run: "make init"
      - name: "Run unit tests and code coverage"
        run: "make tests-unit"
  integration-tests:
    needs: ["lint"]
    runs-on: "ubuntu-latest"
    env:
      POSTGRES_USERNAME: "test"
      POSTGRES_PASSWORD: "test"
      POSTGRES_DATABASE: "test"
      POSTGRES_HOST: "localhost"
      POSTGRES_PORT: "5432"
    services:
      postgres:
        image: "postgres:14.2"
        env:
          POSTGRES_USER: "test"
          POSTGRES_PASSWORD: "test"
          POSTGRES_DB: "test"
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - "5432:5432"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.10"
      - name: "Setup poetry"
        uses: "snok/install-poetry@v1"
      - name: "Restore cache"
        uses: "actions/cache@v2"
        with:
          path: "~/.cache/pypoetry/virtualenvs/"
          key: "poetry-${{ hashFiles('**/poetry.lock') }}"
      - name: "Install dependencies"
        run: "make init"
      - name: "Run integration tests and code coverage"
        run: "make tests-integration"
  build:
    runs-on: "ubuntu-latest"
    env:
      IMAGE_TAG: "latest"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Login to docker registry"
        run: "make login"
      - name: "Build docker image"
        run: "make build"
      - name: "Push release candidate on registry"
        run: "make push"
  component-tests:
    runs-on: "ubuntu-latest"
    needs: ["build", "unit-tests", "integration-tests"]
    env:
      POSTGRES_USERNAME: "test"
      POSTGRES_PASSWORD: "test"
      POSTGRES_DATABASE: "test"
      POSTGRES_HOST: "localhost"
      POSTGRES_PORT: "5432"
      TESTED_HOST: "localhost"
      TESTED_PORT: "8000"
    services:
      beerbox:
        image: "registry.defeyter.fr/beerbox-backend:latest"
        credentials:
          username: "${{ secrets.REGISTRY_USERNAME }}"
          password: "${{ secrets.REGISTRY_PASSWORD }}"
        env:
          VERSION: "${{ github.sha }}"
          POSTGRES_USERNAME: "test"
          POSTGRES_PASSWORD: "test"
          POSTGRES_DATABASE: "test"
          POSTGRES_HOST: "postgres"
          POSTGRES_PORT: "5432"
        ports:
          - "8000:8000"
      postgres:
        image: "postgres:14.2"
        env:
          POSTGRES_USER: "test"
          POSTGRES_PASSWORD: "test"
          POSTGRES_DB: "test"
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - "5432:5432"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.10"
      - name: "Setup poetry"
        uses: "snok/install-poetry@v1"
      - name: "Restore cache"
        uses: "actions/cache@v2"
        with:
          path: "~/.cache/pypoetry/virtualenvs/"
          key: "poetry-${{ hashFiles('**/poetry.lock') }}"
      - name: "Install dependencies"
        run: "make init"
      - name: "Setup database"
        run: "make database-upgrade"
      - name: "Run component testing"
        run: "make tests-component"
  contract-tests:
    runs-on: "ubuntu-latest"
    needs: ["build", "unit-tests", "integration-tests"]
    env:
      POSTGRES_USERNAME: "test"
      POSTGRES_PASSWORD: "test"
      POSTGRES_DATABASE: "test"
      POSTGRES_HOST: "localhost"
      POSTGRES_PORT: "5432"
      TESTED_HOST: "localhost"
      TESTED_PORT: "8000"
    services:
      beerbox:
        image: "registry.defeyter.fr/beerbox-backend:latest"
        credentials:
          username: "${{ secrets.REGISTRY_USERNAME }}"
          password: "${{ secrets.REGISTRY_PASSWORD }}"
        env:
          VERSION: "${{ github.sha }}"
          POSTGRES_USERNAME: "test"
          POSTGRES_PASSWORD: "test"
          POSTGRES_DATABASE: "test"
          POSTGRES_HOST: "postgres"
          POSTGRES_PORT: "5432"
        ports:
          - "8000:8000"
      postgres:
        image: "postgres:14.2"
        env:
          POSTGRES_USER: "test"
          POSTGRES_PASSWORD: "test"
          POSTGRES_DB: "test"
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - "5432:5432"
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Setup python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.10"
      - name: "Setup poetry"
        uses: "snok/install-poetry@v1"
      - name: "Restore cache"
        uses: "actions/cache@v2"
        with:
          path: "~/.cache/pypoetry/virtualenvs/"
          key: "poetry-${{ hashFiles('**/poetry.lock') }}"
      - name: "Install dependencies"
        run: "make init"
      - name: "Setup database"
        run: "make database-upgrade"
      - name: "Run contract testing"
        run: "make tests-contract"
  release:
    runs-on: "ubuntu-latest"
    needs: ["contract-tests", "component-tests"]
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v2"
      - name: "Set the IMAGE_TAG environment variable"
        run: "echo \"IMAGE_TAG=release-$(date +'%s')-$GITHUB_SHA\" >> $GITHUB_ENV"
      - name: "Login to docker registry"
        run: "make login"
      - name: "Build docker image"
        run: "make build"
      - name: "Push docker image on registry"
        run: "make push"
