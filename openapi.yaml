openapi: "3.0.2"
info:
  title: "apibox"
  version: "0.1"
components:
  schemas:
    UserRequest:
      type: "object"
      required:
        - "username"
      properties:
        username:
          type: "string"
    UserResponse:
      type: "object"
      required:
        - "createdAt"
        - "modifiedAt"
        - "publicId"
        - "username"
      properties:
        createdAt:
          type: "string"
          format: "date-time"
        modifiedAt:
          type: "string"
          format: "date-time"
        publicID:
          type: "string"
        username:
          type: "string"
    ContributionRequest:
      type: "object"
      required:
        - "amount"
        - "description"
        - "userId"
      properties:
        amount:
          type: "integer"
        description:
          type: "string"
        userId:
          type: "string"
    ContributionResponse:
      type: "object"
      required:
        - "amount"
        - "createdAt"
        - "description"
        - "modifiedAt"
        - "publicId"
        - "userId"
      properties:
        amount:
          type: "integer"
        createdAt:
          type: "string"
          format: "date-time"
        description:
          type: "string"
        modifiedAt:
          type: "string"
          format: "date-time"
        publicId:
          type: "string"
        userId:
          type: "string"
    BoxRequest:
      type: "object"
      required:
        - "name"
      properties:
        name:
          type: "string"
    BoxResponse:
      type: "object"
      required:
        - "createdAt"
        - "modifiedAt"
        - "publicId"
        - "name"
      properties:
        createdAt:
          type: "string"
          format: "date-time"
        modifiedAt:
          type: "string"
          format: "date-time"
        publicID:
          type: "string"
        name:
          type: "string"
    HealthCheck:
      type: "object"
      required:
        - "name"
        - "time"
        - "status"
        - "observedValue"
        - "observedUnit"
      properties:
        name:
          type: "string"
        time:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          enum:
            - "fail"
            - "pass"
        observedValue:
          type: "string"
        observedUnit:
          type: "string"
    HealthResponse:
      type: "object"
      required:
        - "status"
        - "checks"
        - "version"
        - "service"
      properties:
        status:
          type: "string"
          enum:
            - "fail"
            - "pass"
        checks:
          type: "array"
          items:
            $ref: "#/components/schemas/HealthCheck"
        version:
          type: "string"
        service:
          type: "string"
    ErrorResponse:
      type: "object"
      required:
        - "code"
        - "message"
      properties:
        code:
          type: "string"
        message:
          type: "string"
        data:
          oneOf:
            - type: "object"
            - type: "array"
paths:
  /users:
    get:
      summary: "get users"
      tags:
        - "users"
      description: "Get the list of users"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      summary: "create user"
      tags:
        - "users"
      description: "Create a new user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{publicId}:
    get:
      summary: "get single user"
      tags:
        - "users"
      description: "Get a single user"
      parameters:
        - in: "path"
          name: "publicId"
          required: true
          schema:
            type: "string"
          description: "public id of the user to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /contributions:
    get:
      summary: "get contributions"
      tags:
        - "contributions"
      description: "Get the list of contributions"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ContributionResponse"
    post:
      summary: "create contribution"
      tags:
        - "contributions"
      description: "Create a new contribution"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContributionRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContributionResponse"
        "422":
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /contributions/{publicId}:
    get:
      summary: "get single contribution"
      tags:
        - "contributions"
      description: "Get a single contribution"
      parameters:
        - in: "path"
          name: "publicId"
          required: true
          schema:
            type: "string"
          description: "public id of the contribution to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContributionResponse"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /boxes:
    get:
      summary: "get boxes"
      tags:
        - "boxes"
      description: "Get the list of boxes"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BoxResponse"
    post:
      summary: "create box"
      tags:
        - "boxes"
      description: "Create a new box"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoxRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoxResponse"
        "422":
          description: "Unprocessable Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: "Conflict"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /boxes/{publicId}:
    get:
      summary: "get single box"
      tags:
        - "boxes"
      description: "Get a single box"
      parameters:
        - in: "path"
          name: "publicId"
          required: true
          schema:
            type: "string"
          description: "public id of the box to get"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoxResponse"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /livez:
    get:
      summary: "get liveness probe"
      tags:
        - "health"
      description: "Get the liveness probe of the applicative server"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /readyz:
    get:
      summary: "get the readiness probe"
      tags:
        - "health"
      description: "Get the readiness probe of the applicative server"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: "Service Unavailable"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
